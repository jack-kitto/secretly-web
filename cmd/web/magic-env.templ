package web

templ MagicEnv() {
	<style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 20px;
      height: 100vh;
    }

    #dropZone {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.5);
      display: none;
      align-items: center;
      justify-content: center;
      z-index: 100;
    }

    #dropZoneText {
      background-color: white;
      padding: 20px;
      border-radius: 5px;
      font-size: 24px;
    }

    #feedback {
      margin-top: 20px;
      padding: 10px;
      border-radius: 5px;
      display: none;
    }

    .success {
      background-color: #d4edda;
      color: #155724;
    }

    .error {
      background-color: #f8d7da;
      color: #721c24;
    }
  </style>
	<div id="dropZone">
		<div id="dropZoneText">Drop file here</div>
	</div>
	<div id="secretsContent" class="hidden no-scrollbar text-[#CFD2D1] bg-gray-800 max-h-[200px] overflow-scroll rounded-lg p-4"></div>
	<script>
    const dropZone = document.getElementById('dropZone');
    const secretsContent = document.getElementById('secretsContent');
    const feedback = document.getElementById('feedback');

    function handleFileContent(content) {
      const secrets = parseEnvFile(content);
      const obfuscatedSecrets = obfuscateSecrets(secrets);

      sendSecretsToServer(secrets);
      displaySecrets(obfuscatedSecrets);
      showFeedback('File processed successfully', 'success');
    }

    function parseEnvFile(content) {
      const lines = content.split('\n');
      const secrets = {};
      for (const line of lines) {
        const [key, value] = line.split('=');
        if (key && value) {
          secrets[key.trim()] = value.trim();
        }
      }
      return secrets;
    }

    function obfuscateSecrets(secrets) {
      const obfuscated = {};
      for (const [key, value] of Object.entries(secrets)) {
        obfuscated[key] = '*'.repeat(value.length);
      }
      return obfuscated;
    }

    function displaySecrets(secrets) {
      for (const [key, value] of Object.entries(secrets)) {
          const node = document.createElement("div")
          node.innerHTML = `${key}=${value}`
          secretsContent.appendChild(node)
          secretsContent.classList.remove("hidden");
      }
    }

    function sendSecretsToServer(secrets) {
      const xhr = new XMLHttpRequest();
      xhr.open("POST", "/upload-secrets", true);
      xhr.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
      xhr.onreadystatechange = function () {
        if (xhr.readyState === 4 && xhr.status === 200) {
          console.log("Secrets uploaded successfully");
        } else if (xhr.readyState === 4) {
          showFeedback("Failed to upload secrets", "error");
        }
      };
      xhr.send(JSON.stringify({ secrets: secrets }));
    }

    function showFeedback(message, type) {
      feedback.textContent = message;
      feedback.className = type;
      feedback.style.display = 'block';
    }

    // Drag and drop functionality
    document.addEventListener('dragenter', (e) => {
      e.preventDefault();
      dropZone.style.display = 'flex';
    });

    document.addEventListener('dragleave', (e) => {
      e.preventDefault();
      if (e.relatedTarget === null) {
        dropZone.style.display = 'none';
      }
    });

    document.addEventListener('dragover', (e) => {
      e.preventDefault();
    });

    document.addEventListener('drop', (e) => {
      e.preventDefault();
      dropZone.style.display = 'none';
      const file = e.dataTransfer.files[0];
      if (file && file.name.startsWith('.env')) {
        const reader = new FileReader();
        reader.onload = (event) => handleFileContent(event.target.result);
        reader.readAsText(file);
      } else {
        showFeedback('Please drop a .env file', 'error');
      }
    });

    // Paste functionality
    document.addEventListener('paste', (e) => {
      const pastedText = e.clipboardData.getData('text');
      handleFileContent(pastedText);
    });

  </script>
}
